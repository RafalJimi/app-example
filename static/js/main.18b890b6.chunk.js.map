{"version":3,"sources":["store/posts/reducer.js","store/comments/reducer.js","store/user/reducer.js","store/reducer.js","store/posts/consts.js","store/comments/consts.js","store/user/consts.js","common/axios.js","common/consts.js","store/posts/saga.js","store/comments/saga.js","store/user/saga.js","store/saga.js","store/index.js","modules/posts/consts/index.js","modules/about/index.js","modules/posts/components/postTitle.js","modules/posts/components/postFooter.js","modules/posts/components/postsList.js","modules/comments/components/commentsTitle.js","modules/comments/consts/index.js","modules/comments/components/commentsFooter.js","modules/comments/components/commentsList.js","modules/comments/layout.js","store/comments/selectors.js","store/user/actions.js","modules/comments/index.js","modules/user/layout.js","store/user/selectors.js","modules/user/index.js","modules/posts/layout.js","store/posts/selectors.js","modules/posts/index.js","store/posts/actions.js","store/comments/actions.js","serviceWorker.js","index.js","App.js"],"names":["initialState","posts","postsLoading","comments","commentsLoading","user","userLoading","reducers","state","action","type","payload","rootReducer","combineReducers","axiosCustom","axios","create","baseURL","get","url","then","res","data","catch","err","Promise","reject","fetchPosts","postsSaga","page","call","request","console","log","put","message","takeLatest","fetchComments","commentsSaga","id","fetchUser","userSaga","name","rootSaga","fork","store","services","sagaMiddleware","createSagaMiddleware","enhancers","composeWithDevTools","applyMiddleware","createStore","compose","run","configureStore","buttons","link","className","onClick","value","text","commentsButtonStyles","fontSize","padding","marginTop","textDecoration","userButtonStyles","About","style","PostTitle","title","domain","href","role","PostFooter","points_count","added","postID","comments_count","handleLoadComments","handleLoadUser","show_comments","points","to","PostsList","handleLoadNextPage","handleFetchPosts","postsType","useEffect","map","p","key","time_ago","CommentsTitle","commentsDivStyles","color","fontWeight","borderTop","userButtonStylesCommentsFooter","CommentsFooter","CommentsList","postInfo","comment","ReactHtmlParser","content","CommentsLayout","borderBottom","selectPostInfo","fetchUserStarted","Comments","memo","dispatch","useDispatch","handleFetchUser","useCallback","useSelector","e","target","UserLayout","created","karma","selectUser","User","PostsLayout","handleLoadPosts","handleChangePostsType","button","exact","path","selectPosts","Posts","useState","setPostsType","setPage","postsArray","setPostArray","handleFetchComments","i","length","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.18b890b6.chunk.js","sourcesContent":["import {\r\n  FETCH_POSTS_STARTED,\r\n  FETCH_POSTS_FAILURE,\r\n  FETCH_POSTS_SUCCESS,\r\n} from './consts';\r\n\r\nexport const initialState = {\r\n  posts: [],\r\n  postsLoading: false,\r\n};\r\n\r\nexport const postsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_POSTS_STARTED:\r\n      return {\r\n        ...state,\r\n        posts: [],\r\n        postsLoading: true,\r\n      };\r\n    case FETCH_POSTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        posts: action.payload,\r\n        postsLoading: false,\r\n      };\r\n    case FETCH_POSTS_FAILURE:\r\n      return {\r\n        ...state,\r\n        posts: [],\r\n        postsLoading: false,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};","import {\r\n  FETCH_COMMENTS_STARTED,\r\n  FETCH_COMMENTS_FAILURE,\r\n  FETCH_COMMENTS_SUCCESS,\r\n} from './consts';\r\n\r\nexport const initialState = {\r\n  comments: [],\r\n  commentsLoading: false,\r\n};\r\n\r\nexport const commentsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_COMMENTS_STARTED:\r\n      return {\r\n        ...state,\r\n        comments: [],\r\n        commentsLoading: true,\r\n      };\r\n    case FETCH_COMMENTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        comments: action.payload,\r\n        commentsLoading: false,\r\n      };\r\n    case FETCH_COMMENTS_FAILURE:\r\n      return {\r\n        ...state,\r\n        comments: [],\r\n        commentsLoading: false,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};","import {\r\n  FETCH_USER_STARTED,\r\n  FETCH_USER_FAILURE,\r\n  FETCH_USER_SUCCESS,\r\n} from './consts';\r\n\r\nexport const initialState = {\r\n  user: [],\r\n  userLoading: false,\r\n};\r\n\r\nexport const userReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_USER_STARTED:\r\n      return {\r\n        ...state,\r\n        user: [],\r\n        userLoading: true,\r\n      };\r\n    case FETCH_USER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n        userLoading: false,\r\n      };\r\n    case FETCH_USER_FAILURE:\r\n      return {\r\n        ...state,\r\n        user: [],\r\n        userLoading: false,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};","import { combineReducers } from 'redux';\r\n\r\nimport { postsReducer } from './posts/reducer';\r\nimport { commentsReducer } from './comments/reducer'\r\nimport { userReducer } from './user/reducer';\r\n\r\n\r\nconst reducers = {\r\n  posts: postsReducer,\r\n  comments: commentsReducer,\r\n  user: userReducer\r\n};\r\n\r\nexport const rootReducer = combineReducers(reducers);","export const FETCH_POSTS_STARTED = 'FETCH_POSTS_STARTED';\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS';\r\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE';","export const FETCH_COMMENTS_STARTED = 'FETCH_COMMENTS_STARTED';\r\nexport const FETCH_COMMENTS_SUCCESS = 'FETCH_COMMENTS_SUCCESS';\r\nexport const FETCH_COMMENTS_FAILURE = 'FETCH_COMMENTS_FAILURE';","export const FETCH_USER_STARTED = 'FETCH_USER_STARTED';\r\nexport const FETCH_USER_SUCCESS = 'FETCH_USER_SUCCESS';\r\nexport const FETCH_USER_FAILURE = 'FETCH_USER_FAILURE';","import axios from 'axios';\r\n\r\nimport { apiUrl } from './consts';\r\n\r\nconst axiosCustom = axios.create({\r\n  baseURL: apiUrl,\r\n});\r\n\r\nexport const get = (url, payload) =>\r\n  axiosCustom\r\n    .get(url, payload)\r\n    .then(res => res.data)\r\n    .catch(err => Promise.reject(err));","export const apiUrl = \"https://api.hnpwa.com/v0/\"\r\n\r\n/* export const apiUrl = process.env.REACT_APP_API_URL; */","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { get } from '../../common/axios';\r\n\r\nimport {\r\n  FETCH_POSTS_SUCCESS,\r\n  FETCH_POSTS_FAILURE,\r\n  FETCH_POSTS_STARTED,\r\n} from './consts';\r\n\r\nexport function* fetchPosts({ payload }) {\r\n  try {\r\n    const { type, page } = payload;\r\n    const request = yield call(get, `${type}/${page}.json`);\r\n    console.log(request);\r\n    yield put({ type: FETCH_POSTS_SUCCESS, payload: request });\r\n  } catch (e) {\r\n    yield put({ type: FETCH_POSTS_FAILURE, message: e });\r\n  }\r\n}\r\n\r\nexport function* postsSaga() {\r\n  yield takeLatest(FETCH_POSTS_STARTED, fetchPosts);\r\n}","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { get } from '../../common/axios';\r\n\r\nimport {\r\n  FETCH_COMMENTS_SUCCESS,\r\n  FETCH_COMMENTS_FAILURE,\r\n  FETCH_COMMENTS_STARTED,\r\n} from './consts';\r\n\r\nexport function* fetchComments({ payload }) {\r\n  try {\r\n    const { id } = payload;\r\n    const request = yield call(get, `item/${id}.json`);\r\n    console.log(request);\r\n    yield put({ type: FETCH_COMMENTS_SUCCESS, payload: request });\r\n  } catch (e) {\r\n    yield put({ type: FETCH_COMMENTS_FAILURE, message: e });\r\n  }\r\n}\r\n\r\nexport function* commentsSaga() {\r\n  yield takeLatest(FETCH_COMMENTS_STARTED, fetchComments);\r\n}","import { call, put, takeLatest } from 'redux-saga/effects';\r\n\r\nimport { get } from '../../common/axios';\r\n\r\nimport {\r\n  FETCH_USER_SUCCESS,\r\n  FETCH_USER_FAILURE,\r\n  FETCH_USER_STARTED,\r\n} from './consts';\r\n\r\nexport function* fetchUser({ payload }) {\r\n  try {\r\n    const { name } = payload;\r\n    const request = yield call(get, `user/${name}.json`);\r\n    console.log(request);\r\n    yield put({ type: FETCH_USER_SUCCESS, payload: request });\r\n  } catch (e) {\r\n    yield put({ type: FETCH_USER_FAILURE, message: e });\r\n  }\r\n}\r\n\r\nexport function* userSaga() {\r\n  yield takeLatest(FETCH_USER_STARTED, fetchUser);\r\n}","import { fork } from 'redux-saga/effects';\r\nimport { postsSaga } from './posts/saga';\r\nimport { commentsSaga } from './comments/saga';\r\nimport { userSaga } from './user/saga';\r\n\r\nexport function* rootSaga(services = {}) {\r\n  yield fork(postsSaga);\r\n  yield fork(commentsSaga);\r\n  yield fork(userSaga)\r\n}\r\n","import { applyMiddleware, createStore, compose } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport { rootReducer } from './reducer.js';\r\nimport { rootSaga } from './saga';\r\n\r\nconst configureStore = (initialState, services) => {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const enhancers = [composeWithDevTools(applyMiddleware(sagaMiddleware))];\r\n\r\n  const store = createStore(rootReducer, initialState, compose(...enhancers));\r\n\r\n  sagaMiddleware.run(rootSaga, services);\r\n\r\n  return store;\r\n};\r\n\r\nexport const store = configureStore();","export const buttons = [\r\n    {link: '/', className: \"btn btn-link p-3\", onClick: 'handleChangePostsType', value: \"news\", text: \"top\", id: \"1\"},\r\n    {link: '/', className: \"btn btn-link p-3\", onClick: 'handleChangePostsType', value: \"newest\", text: \"new\", id: \"2\"},\r\n    {link: '/', className: \"btn btn-link p-3\", onClick: 'handleChangePostsType', value: \"show\", text: \"show\", id: \"3\"},\r\n    {link: '/', className: \"btn btn-link p-3\", onClick: 'handleChangePostsType', value: \"ask\", text: \"ask\", id: \"4\"},\r\n    {link: '/', className: \"btn btn-link p-3\", onClick: 'handleChangePostsType', value: \"jobs\", text: \"jobs\", id: \"5\"},\r\n    {link: '/about', className: \"btn btn-link float-right p-3\", onClick: 'null', value: \"about\", text: \"about\", id: \"6\"}\r\n]\r\n\r\nexport const commentsButtonStyles = { \r\n    fontSize: '14px', \r\n    padding: '0px', \r\n    marginTop: '-3px', \r\n    textDecoration: 'underline'\r\n}\r\n\r\nexport const userButtonStyles = { \r\n    fontSize: '14px', \r\n    padding: '0px', \r\n    marginTop: '-3px', \r\n    textDecoration: 'underline'   \r\n}","import React from 'react'\r\n\r\n\r\nexport const About = () => (\r\n  <div style={{marginTop: '30px'}}>\r\n  <h3>About this app</h3>\r\n  <p>This is a simple Hacker News clone</p>\r\n  </div>\r\n);","import React from 'react';\r\n\r\nexport const PostTitle = ({ title, url, domain}) => (\r\n    <h6 className=\"text-dark cursor-pointer\">\r\n        <a href={url} className=\"text-dark\" role=\"button\">\r\n            {title}\r\n        {domain &&\r\n        <small className=\"text-muted\"> ({domain})</small>}</a> \r\n    </h6>\r\n);","import React from 'react';\r\nimport {commentsButtonStyles, userButtonStyles} from '../consts/index'\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport const PostFooter = ({ points_count, user, added, postID, comments_count, handleLoadComments, handleLoadUser}) => {\r\n\r\n    const show_comments = comments_count === 0 ? false : true\r\n    const comments = comments_count === 1 ? \"comment\" : \"comments\"\r\n    const points = points_count ===1 ? \"point\" : \"points\"\r\n\r\n    return(\r\n    <p><small>\r\n        { user && \r\n        <span> {points_count} {points} by \r\n        <Link to={`/user/${user}`}>\r\n            <button className=\"btn btn-link text-muted 6px ml-1 mr-1\" \r\n            style={userButtonStyles} \r\n            onClick={handleLoadUser} \r\n            value={user}>\r\n                {user} \r\n                </button>  \r\n        </Link> \r\n        </span>} \r\n        {added}\r\n        {show_comments && \r\n        <span> | \r\n            <Link to={`/item/${postID}`}>\r\n                <button className=\"btn btn-link text-muted 6px ml-1\" \r\n                style={commentsButtonStyles} \r\n                onClick={handleLoadComments} \r\n                value={postID}>\r\n                         {comments_count} {comments} \r\n                      </button>  \r\n            </Link> \r\n        </span>}\r\n    </small></p>\r\n    )\r\n};","import React, { useEffect } from 'react';\r\n\r\nimport {PostTitle} from './postTitle'\r\nimport {PostFooter} from './postFooter'\r\n\r\nexport const PostsList = ({ handleLoadNextPage, handleFetchPosts, handleLoadComments, handleLoadUser, postsType, page, posts }) => {\r\n\r\n    useEffect(() => {\r\n      handleFetchPosts('news', 1)\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      handleFetchPosts(postsType, page)\r\n    }, [postsType, page]);\r\n\r\n    return (\r\n        <div>\r\n        <ol>\r\n      {posts &&\r\n      posts.map(p => (\r\n        <li className=\"font-weight-bold text-secondary text-center p-2\" key={p.id} style={{fontSize: '18px'}}>\r\n          <PostTitle \r\n            title={p.title}\r\n            domain={p.domain}\r\n            url={p.url}\r\n          />\r\n          <PostFooter\r\n            handleLoadComments={handleLoadComments}\r\n            points_count={p.points}\r\n            user={p.user}\r\n            added={p.time_ago}\r\n            comments_count={p.comments_count}\r\n            postID={p.id}\r\n            handleLoadUser={handleLoadUser}\r\n          />\r\n        </li>\r\n      ))}\r\n        </ol>\r\n        <button type=\"button\" className=\"btn btn-link p-3\" onClick={handleLoadNextPage}>More ...</button>\r\n      </div>\r\n      )\r\n    };","import React from 'react';\r\n\r\nexport const CommentsTitle = ({ title, url, domain}) => (\r\n    <h3 className=\"text-dark cursor-pointer\">\r\n        <a href={url} className=\"text-dark\" role=\"button\">\r\n            {title}\r\n        {domain &&\r\n        <p><small className=\"text-muted\">({domain})</small></p>}</a> \r\n    </h3>\r\n);","export const commentsDivClassName = \"text-left ml-4 pt-2\"\r\n\r\nexport const commentsDivStyles = {\r\n    fontSize: '16px', \r\n    color: 'black', \r\n    fontWeight: '100', \r\n    borderTop: '#ebebeb solid 2px'\r\n}\r\n\r\nexport const userButtonStyles = { \r\n    fontSize: '14px', \r\n    padding: '0px', \r\n    marginTop: '-5px', \r\n    textDecoration: 'underline'   \r\n}\r\n\r\nexport const userButtonStylesCommentsFooter = { \r\n    fontSize: '13px', \r\n    padding: '0px', \r\n    marginTop: '-5px', \r\n    textDecoration: 'underline'   \r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {userButtonStylesCommentsFooter} from '../consts/index'\r\n\r\nexport const CommentsFooter = ({ points_count, user, added, handleLoadUser }) => {\r\n\r\n    const points = points_count ===1 ? \"point\" : \"points\"\r\n\r\n    return(\r\n    <p><small>\r\n        { user && <span>{points_count} {points} by \r\n            <Link to={`/user/${user}`}>\r\n                <button className=\"btn btn-link text-muted 6px ml-1 mr-0\" \r\n                style={userButtonStylesCommentsFooter} \r\n                onClick={handleLoadUser} \r\n                value={user}>\r\n                    {user} \r\n                </button>\r\n            </Link> </span>} {added}\r\n    </small></p>\r\n    )\r\n};","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport {commentsDivClassName, commentsDivStyles, userButtonStyles} from '../consts/index'\r\n\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport const CommentsList = ({ postInfo, handleLoadUser }) => {\r\n\r\n  return (\r\n    <div>\r\n      {<div className=\"container text-left\" style={{marginTop: '25px'}}>\r\n      {postInfo.comments &&\r\n      postInfo.comments.map(comment => (\r\n        <div className={commentsDivClassName} key={comment.id} style={commentsDivStyles}>\r\n          <div>\r\n            <p style={{fontSize: '14px'}}>\r\n              <Link to={`/user/${comment.user}`}>\r\n                <button className=\"btn btn-link text-muted 6px ml-0 mr-0\" \r\n                style={userButtonStyles} \r\n                onClick={handleLoadUser} \r\n                value={comment.user}>\r\n                  {comment.user} \r\n                </button>\r\n                </Link> {comment.time_ago}</p>\r\n            {ReactHtmlParser(comment.content)}\r\n          </div>\r\n          {comment.comments.map(comment => (\r\n          <div className={commentsDivClassName} key={comment.id} style={commentsDivStyles}>\r\n              <p style={{fontSize: '14px'}}>\r\n                <Link to={`/user/${comment.user}`}>\r\n                  <button className=\"btn btn-link text-muted 6px ml-0 mr-0\" \r\n                  style={userButtonStyles} \r\n                  onClick={handleLoadUser} \r\n                  value={comment.user}>\r\n                    {comment.user} \r\n                </button>\r\n                </Link> {comment.time_ago}</p>\r\n              {ReactHtmlParser(comment.content)}\r\n            {comment.comments.map(comment => (\r\n            <div className={commentsDivClassName} key={comment.id} style={commentsDivStyles}>\r\n                <p style={{fontSize: '14px'}}>\r\n                  <Link to={`/user/${comment.user}`}>\r\n                    <button className=\"btn btn-link text-muted 6px ml-0 mr-0\" \r\n                    style={userButtonStyles} \r\n                    onClick={handleLoadUser} \r\n                    value={comment.user}>\r\n                {comment.user} \r\n                </button>\r\n                </Link> {comment.time_ago}</p>\r\n                {ReactHtmlParser(comment.content)}\r\n              {comment.comments.map(comment => (\r\n              <div className={commentsDivClassName} key={comment.id} style={commentsDivStyles}>\r\n                  <p style={{fontSize: '14px'}}>\r\n                    <Link to={`/user/${comment.user}`}>\r\n                      <button className=\"btn btn-link text-muted 6px ml-0 mr-0\" \r\n                      style={userButtonStyles} \r\n                      onClick={handleLoadUser} \r\n                      value={comment.user}>\r\n                {comment.user} \r\n                </button>\r\n                </Link> {comment.time_ago}</p>\r\n                  {ReactHtmlParser(comment.content)}\r\n              </div>\r\n      ))}\r\n        </div>\r\n      ))}\r\n        </div>\r\n      ))}\r\n        </div>\r\n      ))}\r\n      </div>}\r\n    </div>\r\n  )\r\n};","import React from 'react';\r\n\r\nimport {CommentsTitle} from './components/commentsTitle'\r\nimport {CommentsFooter} from './components/commentsFooter'\r\nimport {CommentsList} from './components/commentsList'\r\n\r\nexport const CommentsLayout = ({ postInfo, handleLoadUser }) => {\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container text-center pt-3 pb-3\" \r\n      style={{marginTop: '10px', borderBottom: '#ebebeb solid 15px'}}>\r\n        <CommentsTitle \r\n          title={postInfo.title}\r\n          domain={postInfo.domain}\r\n          url={postInfo.url}\r\n        />\r\n        <CommentsFooter \r\n          points_count={postInfo.points}\r\n          user={postInfo.user}\r\n          added={postInfo.time_ago}\r\n          handleLoadUser={handleLoadUser}\r\n        />\r\n      </div>\r\n        <CommentsList \r\n          postInfo={postInfo}\r\n          handleLoadUser={handleLoadUser}\r\n        />\r\n    </div>\r\n  )\r\n};","export const selectPostInfo = state => state.comments.comments;","import { \r\n    FETCH_USER_STARTED, \r\n    FETCH_USER_SUCCESS, \r\n    FETCH_USER_FAILURE \r\n} from \"./consts\";\r\n\r\n\r\nexport const fetchUserStarted = payload => ({\r\n    type: FETCH_USER_STARTED, \r\n    payload\r\n});\r\n\r\nexport const fetchUserSuccess = payload => ({\r\n    type: FETCH_USER_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const fetchUserFailure = () => ({type: FETCH_USER_FAILURE});","import React, { memo, useCallback } from 'react';\r\nimport { CommentsLayout } from './layout';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectPostInfo } from '../../store/comments/selectors';\r\n\r\n\r\nimport { fetchUserStarted } from '../../store/user/actions';\r\n\r\nexport const Comments = memo(() => {\r\n\r\n  const dispatch = useDispatch();\r\n  const handleFetchUser = useCallback((name) => {\r\n    dispatch(fetchUserStarted({ name: name }));\r\n  }, []);\r\n\r\n  const postInfo = useSelector(selectPostInfo);\r\n\r\n  const handleLoadUser = (e) => {\r\n    handleFetchUser(e.target.value)\r\n  }\r\n\r\n  return (\r\n      <CommentsLayout\r\n        postInfo={postInfo}\r\n        handleLoadUser={handleLoadUser}\r\n      />\r\n    );\r\n  });","import React from 'react';\r\n\r\nexport const UserLayout = ({ user }) => {\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container text-center\" style={{marginTop: '40px'}}>\r\n        <h4>{user.id}</h4>\r\n        <h6>... joined {user.created}, and has {user.karma} karma</h6>\r\n      </div>\r\n    </div>\r\n    )\r\n  };","export const selectUser = state => state.user.user;","import React, { memo } from 'react';\r\nimport { UserLayout } from './layout';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { selectUser } from '../../store/user/selectors';\r\n\r\n\r\nexport const User = memo(() => {\r\n\r\nconst user = useSelector(selectUser);\r\n\r\nreturn (\r\n    <UserLayout\r\n      user={user}\r\n    />\r\n  );\r\n});","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Switch, Route, Link } from \"react-router-dom\";\r\n\r\n\r\nimport {buttons} from './consts/index'\r\nimport {About} from '../about/index'\r\nimport {PostsList} from './components/postsList'\r\nimport {Comments} from '../comments/index'\r\nimport {User} from '../user/index'\r\n\r\n\r\nexport const PostsLayout = ({ handleLoadPosts, handleChangePostsType, handleLoadNextPage, handleFetchPosts, handleLoadComments, handleLoadUser, postsType, page, posts }) => {\r\n\r\n  return (\r\n    <div>\r\n      <div style={{borderBottom: '#007bff solid 1px'}}>\r\n          {buttons.map(button => <Link to={button.link}>\r\n            <button type=\"button\" \r\n            key={button.id} \r\n            className={button.className} \r\n            onClick={handleChangePostsType} \r\n            value={button.value}>\r\n              {button.text} \r\n            </button>\r\n            </Link>)}\r\n      </div>\r\n      <div className=\"container text-center col-xl-5\" style={{marginTop: '10px'}}>\r\n        <Switch>\r\n          <Route exact path=\"/\">\r\n            <PostsList\r\n              handleLoadPosts={handleLoadPosts}\r\n              handleLoadNextPage={handleLoadNextPage}\r\n              handleFetchPosts={handleFetchPosts}\r\n              handleLoadComments={handleLoadComments}\r\n              handleLoadUser={handleLoadUser}\r\n              posts={posts}\r\n              postsType={postsType}\r\n              page={page}\r\n            />\r\n          </Route>\r\n          <Route path=\"/item\">\r\n            <Comments />\r\n          </Route>\r\n          <Route path=\"/user\">\r\n            <User />\r\n          </Route>\r\n          <Route path=\"/about\">\r\n            <About />\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n    )\r\n  };","export const selectPosts = state => state.posts.posts;\r\n\r\nexport const selectPostById = id => state =>\r\n  state.posts.posts.find(post => post.id === id);","import React, { memo, useState, useCallback } from 'react';\r\nimport { PostsLayout } from './layout';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { fetchPostsStarted } from '../../store/posts/actions';\r\nimport { fetchCommentsStarted } from '../../store/comments/actions';\r\nimport { fetchUserStarted } from '../../store/user/actions';\r\n\r\nimport { selectPosts } from '../../store/posts/selectors';\r\n\r\nexport const Posts = memo(() => {\r\n\r\n  const [postsType, setPostsType] = useState('news');\r\n  const [page, setPage] = useState(1)\r\n  const [postsArray, setPostArray] = useState([])\r\n\r\n  const dispatch = useDispatch();\r\n  const handleFetchPosts = useCallback((postsType, page) => {\r\n    dispatch(fetchPostsStarted({ type: postsType, page: page}));\r\n  }, []);\r\n\r\n  const handleFetchComments = useCallback((id) => {\r\n    dispatch(fetchCommentsStarted({ id: id }));\r\n  }, []);\r\n\r\n  const handleFetchUser = useCallback((name) => {\r\n    dispatch(fetchUserStarted({ name: name }));\r\n  }, []);\r\n\r\n  const handleLoadPosts = (type, page) => {\r\n    handleFetchPosts(type, page)\r\n    setPostArray(posts)\r\n    }\r\n\r\n  const handleChangePostsType = e => {\r\n    setPostArray([])\r\n    setPostsType(e.target.value);\r\n    setPage(1);\r\n    handleFetchPosts(e.target.value, page)\r\n  }\r\n\r\n  const handleLoadNextPage = (e) => {\r\n    setPage(page + 1);\r\n    handleFetchPosts(postsType, page)\r\n  }\r\n\r\n  const handleLoadComments = (e) => {\r\n    handleFetchComments(e.target.value)\r\n  }\r\n\r\n  const handleLoadUser = (e) => {\r\n    handleFetchUser(e.target.value)\r\n  }\r\n\r\n  const posts = useSelector(selectPosts);\r\n  for (let i=0; i<posts.length; i++) {\r\n    postsArray.push(posts[i])\r\n    }\r\n\r\nreturn (\r\n  <PostsLayout\r\n      handleLoadPosts={handleLoadPosts}\r\n      handleChangePostsType={handleChangePostsType}\r\n      handleLoadNextPage={handleLoadNextPage}\r\n      handleFetchPosts={handleFetchPosts}\r\n      postsType={postsType}\r\n      page={page}\r\n      posts={postsArray}\r\n      handleLoadComments={handleLoadComments}\r\n      handleLoadUser={handleLoadUser}\r\n    />\r\n  );\r\n});","import { \r\n    FETCH_POSTS_STARTED, \r\n    FETCH_POSTS_SUCCESS, \r\n    FETCH_POSTS_FAILURE \r\n} from \"./consts\";\r\n\r\n\r\nexport const fetchPostsStarted = payload => ({\r\n    type: FETCH_POSTS_STARTED, \r\n    payload\r\n});\r\n\r\nexport const fetchPostSuccess = payload => ({\r\n    type: FETCH_POSTS_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const fetchPostFailure = () => ({type: FETCH_POSTS_FAILURE});","import { \r\n    FETCH_COMMENTS_STARTED, \r\n    FETCH_COMMENTS_SUCCESS, \r\n    FETCH_COMMENTS_FAILURE \r\n} from \"./consts\";\r\n\r\n\r\nexport const fetchCommentsStarted = payload => ({\r\n    type: FETCH_COMMENTS_STARTED, \r\n    payload\r\n});\r\n\r\nexport const fetchCommentsSuccess = payload => ({\r\n    type: FETCH_COMMENTS_SUCCESS,\r\n    payload,\r\n});\r\n\r\nexport const fetchCommentsFailure = () => ({type: FETCH_COMMENTS_FAILURE});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport { store } from './store';\nimport { Posts } from './modules/posts';\n\nexport const App = () => (\n  <Router>\n    <Provider store={store}>\n      <Posts />\n    </Provider>\n  </Router>\n);"],"sourceRoot":""}